// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	company "group-project-3/features/company"

	mock "github.com/stretchr/testify/mock"
)

// CompanyData is an autogenerated mock type for the CompanyDataInterface type
type CompanyData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *CompanyData) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *CompanyData) Insert(input company.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(company.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: id
func (_m *CompanyData) Select(id uint) (company.Core, error) {
	ret := _m.Called(id)

	var r0 company.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (company.Core, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) company.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(company.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: pageNumber, pageSize
func (_m *CompanyData) SelectAll(pageNumber int, pageSize int) ([]company.Core, error) {
	ret := _m.Called(pageNumber, pageSize)

	var r0 []company.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]company.Core, error)); ok {
		return rf(pageNumber, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []company.Core); ok {
		r0 = rf(pageNumber, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]company.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(pageNumber, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, input
func (_m *CompanyData) Update(id uint, input company.Core) error {
	ret := _m.Called(id, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, company.Core) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCompanyData creates a new instance of CompanyData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCompanyData(t interface {
	mock.TestingT
	Cleanup(func())
}) *CompanyData {
	mock := &CompanyData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
